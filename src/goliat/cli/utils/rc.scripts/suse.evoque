#! /bin/sh
# Copyright (c) 2010 Open Phoenix IT S.Coop.And.
# All rights reserved.
#
# Author: Goliat Project Manager, 2010
#
# /etc/init.d/${app_name}
#   and its symbolic link
# /usr/local/sbin/${app_name}

### BEGIN INIT INFO
# Provides:          ${app_name}
# Required-Start:    $$network
# Required-Stop:
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: ${app_name}
# Description:       ${app_desc}
### END INIT INFO

APP_NAME=${app_name}

# Check for missing binaries
TWISTD_BIN=/usr/bin/twistd
test -x $$TWISTD_BIN || { echo "$$TWISTD_BIN not installed";
    if [ "$$1" = "stop" ]; then exit 0;
    else exit 5; fi; }

# Check for existence of needed config file and read it
TWISTD_CONFIG=/etc/$${APP_NAME}.cfg
test -r $$TWISTD_CONFIG || { echo "$$TWISTD_CONFIG not existing";
    if [ "$$1" = "stop" ]; then exit 0;
    else exit 6; fi; }

# Read config
. $$TWISTD_CONFIG

# Load the rc.status script for this service.
. /etc/rc.status

# Reset status of this service
rc_reset

case "$$1" in
    start)
        echo -n "Starting $${APP_NAME} "
        ## Start daemon with startproc(8). If this fails
        ## the return value is set appropriately by startproc.
        startproc $$TWISTD_BIN --pidfile=/var/run/$${APP_NAME}.pid --logfile=${app_log} --file=${app_file} --rundir=${app_share}

        # Remember status and be verbose
        rc_status -v
        ;;
    stop)
        echo -n "Shutting down $${APP_NAME} "
        ## Stop daemon with killproc(8) and if this fails
        ## killproc sets the return value according to LSB.

        killproc -TERM $$TWISTD_BIN

        # Remember status and be verbose
        rc_status -v
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $$0 stop
        $$0 start

        # Remember status and be quiet
        rc_status
        ;;
    reload)
        # If it supports signaling:
        echo -n "Reload service $${APP_NAME} "
        killproc -HUP $$TWISTD_BIN                
        rc_status -v

        ## Otherwise if it does not support reload:
        #rc_failed 3
        #rc_status -v
        ;;
    status)
        echo -n "Checking for service $${APP_NAME} "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Return value is slightly different for the status command:
        # 0 - service up and running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running (unused)
        # 4 - service status unknown :-(
        # 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
        
        # NOTE: checkproc returns LSB compliant status values.
        checkproc $$TWISTD_BIN
        # NOTE: rc_status knows that we called this init script with
        # "status" option and adapts its messages accordingly.
        rc_status -v
        ;;
    *)
        ## If no parameters are given, print which are avaiable.
        echo "Usage: $$0 {start|stop|status|restart|reload}"
        exit 1
        ;;
esac
